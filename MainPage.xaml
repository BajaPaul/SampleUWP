<Page
    x:Class="SampleUWP.MainPage"
    xmlns:local="using:SampleUWP"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="{ThemeResource SystemControlAcrylicWindowBrush}">

    <!-- XAML Special Characters: What appears between & and ; must be a valid parser name or
    is numeric, "#" for decimal or "#x" for hexidecimal, and must be in range of acceptable Unicode values.
    Windows uses the UTF-16 implementation of Unicode.
    See more at: https://msdn.microsoft.com/en-us/library/windows/desktop/dd892769(v=vs.85).aspx
    and at: https://msdn.microsoft.com/en-us/library/windows/desktop/dd374081(v=vs.85).aspx
                   XAML     XAML     C#
    Char  Entity   Dec      Hex      Hex
    &     &amp;    &#38;    &#x26;   \u0026
    <     &lt;     &#60;    &#x3C;   \u003C
    >     &gt;     &#62;    &#x3E;   \u003E
    "     &quot;   &#34;    &#x22;   \U0022
    '     &apos;   &#39;    &#x27;   \u0027
    To use symbols, use the 'Segoe MDL2 Assets' font.
    XAML: Hamburger=&#xE700 Home=&#xE80F Back=&#xE72B Forward=&#xE72A Page=&#xE7C3
    C#:   Hamburger=\uE700  Home=\uE80F  Back=\uE72B  Forward=\uE72A  Page=\uE7C3       -->

    <Page.Resources>

        <!-- The following binding converter classes are defined at end of MainPage.xaml.cs -->
        
        <local:SymbolTypeConverter x:Key="FontSelector"></local:SymbolTypeConverter>
        <local:SymbolTextConverter x:Key="DisplaySymbolText"></local:SymbolTextConverter>
        <local:MenuTextConverter   x:Key="DisplayMenuText"></local:MenuTextConverter>

        <!-- This is used to override default ListViewItem theme settings.
        See much more at: https://msdn.microsoft.com/en-us/library/windows/apps/mt299136.aspx
        <Setter Property="Padding" Value="12,0,12,0"/>
        <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}"/>  Default minimum width = 88
        <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}"/> Default minimum height = 44
        Can override minimum height here if desired!!!  If so, set menu button height accordingly.
        -->
        <Style TargetType="ListViewItem" x:Key="menuListViewItem">
            <Setter Property="Padding" Value="0,0,12,0"/>
            <Setter Property="MinHeight" Value="47"/>
            <!-- MinHeight set to 47 from default of 44 to match Pivot headers when appear side-by-side. -->
        </Style>

        
        <!-- NOTE: Next two keys are showing up as errors in latest VS release but everything compiles and works as expected. Paul 2020-06-20. -->
        
        <!-- Set the CompactPaneLength width of menu/hamburger button and alternative back button on Title Bar.  Also sets width of top and bottom
        SplitView menus.  Also sets the width of TextBlocks that display the symbolText for the top and bottom SplitView menus. -->
        <x:Double x:Key="menuCompactPaneLength">48</x:Double>

        <!-- Set the OpenPaneLength width of the top and bottom SplitView menus. -->
        <x:Double x:Key="menuOpenPaneLength">235</x:Double>
        

    </Page.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <!-- Title Bar -->
        <StackPanel x:Name="titleBar" Grid.Row="0" Orientation="Horizontal" Background="#FF1E67B2">
            <!-- Used ListView here for Hamburger Menu Button so that highlight behavior is same as topMenu and BotMenu Listview menus below. -->
            <ListView  ItemContainerStyle="{Binding Source={StaticResource menuListViewItem}}" Width="{Binding Source={StaticResource menuCompactPaneLength}}" TabNavigation="Local" SelectionMode="None" TabIndex="0">
                <ListViewItem Width="{Binding Source={StaticResource menuCompactPaneLength}}" Height="{ThemeResource ListViewItemMinHeight}" ToolTipService.ToolTip="Right-Click to change menu display mode" Background="DodgerBlue" MinWidth="0" MinHeight="0" HorizontalContentAlignment="Center" Tapped="Hamburger_Tapped" RightTapped="Hamburger_RightTapped">
                    <TextBlock  Text="&#xE700;" FontFamily="{Binding Source={StaticResource fontSymbol}}" FontSize="{ThemeResource ListViewHeaderItemThemeFontSize}" Width="{Binding Source={StaticResource menuCompactPaneLength}}" TextAlignment="Center"/>
                </ListViewItem>
            </ListView>
            <!-- Alternative back button from global back.  This is consistent with what Microsoft is doing with their apps.  Background color bound to match title bar like Microsoft does in their apps. -->
            <Button Name="buttonBack" Style="{ThemeResource NavigationBackButtonNormalStyle}" Content="&#xE72B;" Height="{ThemeResource ListViewItemMinHeight}" Click="ButtonBack_Click"
                    FontSize="{ThemeResource ListViewHeaderItemThemeFontSize}" Width="{Binding Source={StaticResource menuCompactPaneLength}}" TabIndex="1" Background="{Binding Background, ElementName=titleBar}" BorderThickness="0" Visibility="Collapsed"/>
            <TextBlock x:Name="titleBarText"   Style="{ThemeResource BaseTextBlockStyle}"    HorizontalAlignment="Left" VerticalAlignment="Center" Margin="16,0,0,0"/>
            <!-- titleBarStatus is a simple way to display a status message to user.  Presently used to show menu menu DisplayMode or error messages. -->
            <TextBlock x:Name="titleBarStatus" Style="{ThemeResource CaptionTextBlockStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="16,0,0,0" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
        </StackPanel>

        <!--  Wrapped SplitView Pane and Content with auto hoizontal and vertical scroll bars when needed. -->
        <SplitView x:Name="menuSetup" Grid.Row="1" CompactPaneLength="{Binding Source={StaticResource menuCompactPaneLength}}" OpenPaneLength="{Binding Source={StaticResource menuOpenPaneLength}}" DisplayMode="CompactOverlay">

            <SplitView.Pane>
                <Grid>
                    <!-- Grid row 1 has nothing in it but acts as bufffer so Settings ListView is pushed to bottom of window as desired.  
                    These grid row settings are the ones that work so do not change!!!! -->
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <!-- "topMenu.ItemsSource = topMenuList;" from MainPage.xaml.cs populates top SplitView menu from list topMenuList defined in MenuSetup.cs file. -->
                    <ListView x:Name="topMenu" Grid.Row="0" SelectionChanged="Menu_SelectionChanged" ItemContainerStyle="{Binding Source={StaticResource menuListViewItem}}" TabNavigation="Local" TabIndex="2">
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Style="{ThemeResource BodyTextBlockStyle}" Text="{Binding Converter={StaticResource DisplaySymbolText}}" 
                                               ToolTipService.ToolTip="{Binding Converter={StaticResource DisplayMenuText}}" 
                                               FontFamily="{Binding Converter={StaticResource FontSelector}}" Width="{Binding Source={StaticResource menuCompactPaneLength}}" 
                                               HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center"
                                    />
                                    <TextBlock Grid.Column="1" Style="{ThemeResource BodyTextBlockStyle}" Text="{Binding Converter={StaticResource DisplayMenuText}}" 
                                               HorizontalAlignment="Left" VerticalAlignment="Center" Margin="6,0,0,0"
                                    />
                                </Grid>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                    <!-- This is the Settings menu item at the bottom of the screen.  It is not part of SplitView menu above and and selections between them
                    need to be handled via code behind.  If item on this menus is selected then item on above menu needs to be deselected.  And opposite needs
                    to occur.  Any changes in above menu also need to be made here.  Intent is to keep them identical other than list feeding them.
                    Grid row 1 has nothing in it but acts as a bufffer to push this Settings item to bottom of window as desired.
                    Below Grid exist to draw border bewtwen the two areas.
                    "botMenu.ItemsSource = botMenuList;" from MainPage.xaml.cs populates bottom SplitView menu from list botMenuList defined in MenuSetup.cs file. -->
                    <Grid Grid.Row="2" BorderThickness="0,1,0,0" BorderBrush="{ThemeResource SystemControlBackgroundBaseMediumLowBrush}">
                        <ListView x:Name="botMenu" SelectionChanged="Menu_SelectionChanged" ItemContainerStyle="{Binding Source={StaticResource menuListViewItem}}" TabNavigation="Local" TabIndex="3">
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" Style="{ThemeResource BodyTextBlockStyle}" Text="{Binding Converter={StaticResource DisplaySymbolText}}" 
                                                   ToolTipService.ToolTip="{Binding Converter={StaticResource DisplayMenuText}}" 
                                                   FontFamily="{Binding Converter={StaticResource FontSelector}}" Width="{Binding Source={StaticResource menuCompactPaneLength}}" 
                                                   HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center"
                                        />
                                        <TextBlock Grid.Column="1" Style="{ThemeResource BodyTextBlockStyle}" Text="{Binding Converter={StaticResource DisplayMenuText}}" 
                                                   HorizontalAlignment="Left" VerticalAlignment="Center" Margin="6,0,0,0"
                                        />
                                    </Grid>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </Grid>
                </Grid>
            </SplitView.Pane>

            <SplitView.Content>
                <ScrollViewer x:Name="mainScroller">
                    <Frame x:Name="mainFrame"/>
                </ScrollViewer>
            </SplitView.Content>

        </SplitView>

        <!-- Set responsive states for SplitView pane menu.  See following links for much more information:
        https://msdn.microsoft.com/en-us/windows/uwp/layout/screen-sizes-and-breakpoints-for-responsive-design
        https://msdn.microsoft.com/windows/uwp/layout/layouts-with-xaml?f=255&MSPPError=-2147217396
        https://www.microsoft.com/en-gb/developers/articles/week03aug15/designing-with-adaptive-triggers-for-windows-10/
        When none of VisualStates are active, system restores UI to specified XAML above.
        Only UWP AdaptiveTriggers are MinWindowWidth and/or MinWindowHeight.  Show largest values first, if not true then goes to next. Returns on true. -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- Large=Default=720: VisualState triggered when window width >= largeAdaptTrigMinWindowWidth epx. -->
                        <AdaptiveTrigger MinWindowWidth="{StaticResource largeAdaptTrigMinWindowWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Set SplitView pane to CompactOverlay in XAML above.  Large is default, Set everything in XAML above then nothing needs to be changed here.  -->
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- Medium=480: VisualState triggered when window width >= meduimAdaptTrigMinWindowWidth and < largeAdaptTrigMinWindowWidth epx. -->
                        <AdaptiveTrigger MinWindowWidth="{StaticResource meduimAdaptTrigMinWindowWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Optimizes objects for medium width.  Also for phones in landscape orientation. 
                        Keeps primary layout narrow while showing SplitView pane. -->
                        <Setter Target="menuSetup.DisplayMode" Value="CompactOverlay" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- Small: VisualState triggered when window width >= 0 and < meduimAdaptTrigMinWindowWidth epx. -->
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Optimizes objects for small width.  For narrow windows and phones in portrait orientation.
                        Collapses the SplitView pane into overlay mode and a rearranges objects stacked below each other. -->
                        <Setter Target="menuSetup.DisplayMode" Value="Overlay" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

    </Grid>
</Page>
