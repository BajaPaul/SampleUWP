using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;

namespace SampleUWP
{
    public sealed partial class P06 : Page
    {
        // A pointer to MainPage is needed if you want to call methods or variables in MainPage.
        private readonly MainPage mainPage = MainPage.mainPagePointer;
        
        public P06()
        {
            this.InitializeComponent();
            
            pagePivot.ItemsSource = mainPage.bindingMenuList;   // This provides the source for binding.  Use mainPage pointer to access bindingMenuList in MenuMain.cs.
            pagePivot.SelectedIndex = 0;        // Selects Pivot menu item.
            ShowSelectedPage();                 // Shows the selected page.

            /*
            mainPage.HideDebugBar();
            mainPage.dM4 = mainPage.bindingMenuList[0].MenuText;
            mainPage.dM5 = mainPage.bindingMenuList.Count.ToString();
            mainPage.dM6 = mainPage.bindingMenuList[1].SymbolText;
            mainPage.ShowDebugBar();
            */
        }

        // Pivot Class: https://msdn.microsoft.com/library/windows/apps/dn608241

        /// <summary>
        /// Navigate to selected page and show page name in page Title.  Note: Pages are not being shown via PivotItem
        /// generated by ItemTemplate but moved outside of Pivot.  More efficient than having all the pages loaded at once.
        /// </summary>
        private void ShowSelectedPage()
        {
            pageFrame.Navigate(mainPage.bindingMenuList[pagePivot.SelectedIndex].PageNavigate);
            pagePivot.Title = mainPage.bindingMenuList[pagePivot.SelectedIndex].MenuText;
        }

        /// <summary>
        /// Invoked when user press page Back button in Pivot header vs. app back button.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            _ = sender;     // Discard unused parameter.
            _ = e;          // Discard unused parameter.
            if (pagePivot.SelectedIndex > 0)
            {
                // If not at the first item, go back to the previous one.
                pagePivot.SelectedIndex -= 1;
                ShowSelectedPage();
            }
            else
            {
                // The first PivotItem is selected, so loop around to the last item.
                pagePivot.SelectedIndex = pagePivot.Items.Count - 1;
                ShowSelectedPage();
            }
        }

        /// <summary>
        /// Invoked when user press page Next button in Pivot header.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NextButton_Click(object sender, RoutedEventArgs e)
        {
            _ = sender;     // Discard unused parameter.
            _ = e;          // Discard unused parameter.
            if (pagePivot.SelectedIndex < pagePivot.Items.Count - 1)
            {
                // If not at the last item, go to the next one.
                pagePivot.SelectedIndex += 1;
                ShowSelectedPage();
            }
            else
            {
                // The last PivotItem is selected, so loop around to the first item.
                pagePivot.SelectedIndex = 0;
                ShowSelectedPage();
            }
        }

        /// <summary>
        /// Invoked when user selects an item from the Pivot menu.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PivotMenu_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _ = sender;     // Discard unused parameter.
            _ = e;          // Discard unused parameter.
            ShowSelectedPage();     // Sweet and simple
        }

    }
}
