<Page
    x:Class="SampleUWP.P07"
    xmlns:local="using:SampleUWP"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <RelativePanel>
        
        <Button Name="SplitViewButton" Background="Transparent" Padding="0,-6" Margin="12" Click="SplitViewButton_Click">
            <FontIcon FontFamily="{ThemeResource ContentControlThemeFontFamily}" Glyph="&#x2261;" FontSize="32" Margin="0,-8,0,0"/>
        </Button>
        <TextBlock Style="{ThemeResource BaseTextBlockStyle}" Text="Responsive Techniques" RelativePanel.RightOf="SplitViewButton" RelativePanel.AlignVerticalCenterWith="SplitViewButton" />
        
        
        <SplitView x:Name="MySplitView" PaneBackground="{ThemeResource ApplicationPageBackgroundThemeBrush}" OpenPaneLength="200"
                   RelativePanel.AlignRightWithPanel="True" RelativePanel.AlignLeftWithPanel="True" RelativePanel.Below="SplitViewButton">
            
            <SplitView.Pane>
                <RelativePanel>
                    <!-- Static Relativepanel, substitutes nested stackpanel or grid with rows/columns for this simple scenario -->
                    <AppBarButton x:Name="BackgroundButton" Icon="Pictures" IsCompact="True" Click="Button_Click"/>
                    <TextBlock Text="Background"  Style="{ThemeResource BodyTextBlockStyle}" RelativePanel.RightOf="BackgroundButton" RelativePanel.AlignVerticalCenterWith="BackgroundButton"/>
                    <AppBarButton x:Name="LockButton" Icon="SetLockScreen" RelativePanel.Below="BackgroundButton" IsCompact="True" Click="Button_Click"/>
                    <TextBlock Text="Lock screen"  Style="{ThemeResource BodyTextBlockStyle}" RelativePanel.RightOf="LockButton" RelativePanel.Below="BackgroundButton"  RelativePanel.AlignVerticalCenterWith="LockButton"/>
                    <AppBarButton x:Name="CameraButton" Icon="Camera" RelativePanel.Below="LockButton" IsCompact="True" Click="Button_Click"/>
                    <TextBlock Text="Camera"  Style="{ThemeResource BodyTextBlockStyle}" RelativePanel.RightOf="CameraButton" RelativePanel.Below="LockButton" RelativePanel.AlignVerticalCenterWith="CameraButton"/>
                </RelativePanel>
            </SplitView.Pane>
            
            <ScrollViewer VerticalScrollBarVisibility="Auto" VerticalScrollMode="Auto" HorizontalScrollBarVisibility="Disabled" HorizontalScrollMode="Disabled">
                <RelativePanel>
                    <!-- Dynamic RelativePanel for composite content where UIElements change positions based on available space 
                         Note that the constraints that change are not declared inline here but declared within the VisualStates below where they apply.
                         This is a useful technique for RelativePanel since VisualStates automatically take care of unsetting properties when leaving a particular VisualState-->
                    <TextBlock Margin="5" x:Name="PreviewLabel" Text="Preview" Style="{ThemeResource BodyTextBlockStyle}" />
                    <Image Margin="5" x:Name="BackgroundImage" Source="ms-appx:///Assets/Background1.png" Stretch="None" Height="190" Width="360"
                       RelativePanel.Below="PreviewLabel"/>
                    <ComboBox Margin="5" x:Name="BackgroundCombo" Header="Background" SelectedIndex="0">
                        <ComboBoxItem>Picture</ComboBoxItem>
                        <ComboBoxItem>Color</ComboBoxItem>
                        <ComboBoxItem>Slide show</ComboBoxItem>
                    </ComboBox>
                    <TextBlock Margin="5" x:Name="PictureLabel" Text="Choose your picture" Style="{ThemeResource BodyTextBlockStyle}" />
                    <StackPanel Margin="5" x:Name="PicturesPanel" Orientation="Horizontal" RelativePanel.Below="PictureLabel">
                        <Image Margin="5" Height="93" Width="93" Source="ms-appx:///Assets/Background1.png" Stretch="UniformToFill" />
                        <Image Margin="5" Height="93" Width="93" Source="ms-appx:///Assets/Background2.png" Stretch="UniformToFill" />
                        <Image Margin="5" Height="93" Width="93" Source="ms-appx:///Assets/Background3.png" Stretch="UniformToFill" />
                        <Image Margin="5" Height="93" Width="93" Source="ms-appx:///Assets/Background4.png" Stretch="UniformToFill" />
                    </StackPanel>
                    
                    <Button Margin="5" x:Name="BrowseButton" Content="Browse" RelativePanel.Below="PicturesPanel"  Click="Button_Click"/>
                    
                    <ComboBox Margin="5" x:Name="FitCombo" Header="Choose a fit" SelectedIndex="0">
                        <ComboBoxItem>Fill</ComboBoxItem>
                        <ComboBoxItem>Fit</ComboBoxItem>
                        <ComboBoxItem>Stretch</ComboBoxItem>
                        <ComboBoxItem>Tile</ComboBoxItem>
                        <ComboBoxItem>Center</ComboBoxItem>
                        <ComboBoxItem>Span</ComboBoxItem>
                    </ComboBox>
                    
                    <TextBlock x:Name="Instructions" Style="{ThemeResource BodyTextBlockStyle}" Margin="5" TextWrapping="Wrap" RelativePanel.Below="BrowseButton">
                        The controls on this page don't perform any actions and are not intended to be interacted with, they are for illustrative purposes only.
                        <LineBreak/><LineBreak/>
                        To use this sample, simply resize the main window and observe how the controls on the page adapt to the change in size.
                    </TextBlock>

                    <HyperlinkButton x:Name="hLink1" Content="AdaptiveTrigger Class" Tag="https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx?f=255&amp;MSPPError=-2147217396" Style="{ThemeResource TextBlockButtonStyle}" Click="Website_Click" RelativePanel.Below="Instructions" Margin="5,0,0,0"/>
                    <HyperlinkButton x:Name="hLink2" Content="Define Layouts with XAML" Tag="https://msdn.microsoft.com/windows/uwp/layout/layouts-with-xaml?f=255&amp;MSPPError=-2147217396" Style="{ThemeResource TextBlockButtonStyle}" Click="Website_Click" RelativePanel.Below="hLink1" Margin="5,0,0,16"/>
                  
                </RelativePanel>
            </ScrollViewer>
        </SplitView>
        
        
        <!-- Responsive VisualStates -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <!-- VisualState triggered when window width >= largeAdaptTrigMinWindowWidth epx. -->
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource largeAdaptTrigMinWindowWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Large: Optimize objects for large width.  Keep SplitView pane always showing inline. -->
                        <Setter Target="MySplitView.DisplayMode" Value="Inline" />
                        <Setter Target="MySplitView.IsPaneOpen" Value="True" />
                        
                        
                        <Setter Target="BackgroundCombo.(RelativePanel.RightOf)" Value="BackgroundImage" />
                        <Setter Target="BackgroundCombo.(RelativePanel.AlignTopWith)" Value="BackgroundImage" />
                        <Setter Target="BackgroundCombo.(RelativePanel.AlignLeftWith)" Value="FitCombo" />
                        <Setter Target="PictureLabel.(RelativePanel.Below)" Value="BackgroundImage" />
                        <Setter Target="FitCombo.(RelativePanel.RightOf)" Value="PicturesPanel" />
                        <Setter Target="FitCombo.(RelativePanel.AlignTopWith)" Value="PictureLabel" />
                        
                        
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <!-- VisualState triggered when window width >= meduimAdaptTrigMinWindowWidth and < largeAdaptTrigMinWindowWidth epx. -->
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource meduimAdaptTrigMinWindowWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Medium: Optimizes objects for medium width.  Also for phones in landscape orientation. 
                        Keeps primary layout narrow while showing SplitView pane. -->
                        <Setter Target="MySplitView.DisplayMode" Value="Inline" />
                        <Setter Target="MySplitView.IsPaneOpen" Value="True" />
                        <Setter Target="BackgroundCombo.(RelativePanel.Below)" Value="BackgroundImage" />
                        <Setter Target="PictureLabel.(RelativePanel.Below)" Value="BackgroundCombo" />
                        <Setter Target="FitCombo.(RelativePanel.Below)" Value="BrowseButton" />
                        <Setter Target="Instructions.(RelativePanel.Below)" Value="FitCombo"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <!-- VisualState triggered when window width >= 0 and < meduimAdaptTrigMinWindowWidth epx. -->
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Small: Optimizes objects for small width.  For narrow windows and phones in portrait orientation.
                        Collapses the SplitView pane into overlay mode and a rearranges objects stacked below each other. -->
                        <Setter Target="MySplitView.DisplayMode" Value="Overlay" />
                        <Setter Target="MySplitView.IsPaneOpen" Value="False" />
                        <Setter Target="BackgroundCombo.(RelativePanel.Below)" Value="BackgroundImage" />
                        <Setter Target="PictureLabel.(RelativePanel.Below)" Value="BackgroundCombo" />
                        <Setter Target="FitCombo.(RelativePanel.Below)" Value="BrowseButton" />
                        <Setter Target="Instructions.(RelativePanel.Below)" Value="FitCombo"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        
    </RelativePanel>
</Page>
